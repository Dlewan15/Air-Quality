{"cells":[{"cell_type":"markdown","metadata":{"id":"p4J_O-vcXj2S"},"source":["# Air Quality Mini Project\n","\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cTAxcqRSaQA_"},"source":["## Define the Problem\n","\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-EXnVnCE3QEJ"},"source":["This project looks into the level of Nitrogen Dioxide air pollution near roadside monitoring station at Dundee Mains Loan at different times of the day over the course of a year.\n","\n","Nitrogen dioxide or NO2 is an gaseous air pollutant that forms when fossil fuels such as coal,  oil or diesel, are burnt in high temperatures. It gets in the air from emissions from cars, trucks and buses. NO2 is harmful to humans causing respiratory issues and worsening of lung and heart diseases. It also has a negative environmental effect contributing to the formation of acid rain and ozone.\n","\n","The main questions I would like to answer are:\n"," - when the level of the Nitrogen Dioxide is higher in this specific roadside location in Dundee?\n"," - can we observe daily/monthly and seasonal patterns of the NO2 level fluctuations?\n","\n","By finding out the trends in NO2 level fluctuations we can mitigate its harmful\n","effects on human health."]},{"cell_type":"markdown","metadata":{"id":"1laU9L8caXJn"},"source":["## Collect the Data\n","\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"u8FF_kz-35OO"},"source":["**Data collection**\n","\n","To look into the dayily/monthly fluctuations of NO2 levels in Dundee I will create my own dataset using data from the online UK-AIR database on the Department for Environment Food & Rural Affairs (DEFRA) website https://uk-air.defra.gov.uk/data/data_selector_service?#mid. A data on pollutants at different locations can be sourced from there. For my dataset I selected the following:\n","\n","* Data Type - Measured Data\n","* Date Range - 1 January 2024 to 31 December 2024\n","* Monitoring Sites - a **Roadside** site - Dundee Mains Loan in Dundee\n","* Pollutants - Pollutant Name - Nitrogen Dioxide\n","* Output Type - CSV file emailed to me\n","\n","Information on the dataset received:\n","\n","Hourly measurement data supplied by UK-air on 13/02/2025\n","\n","All Data GMT hour ending\n","\n","Status: V=Verified P=Provisionaly Verified N=Not Verified S=Suspect\n","\n","Site Name\tDundee Mains Loan\n","\n","Latitude\t\t56.47543\n","\n","Longitude\t\t-2.95986\n","\n","Site Type\t\tUrban Background\n","\n","Zone\t\tNorth East Scotland\n","\n","Agglomeration\t#N/A\n","\n","Local Authority\tDundee\n"]},{"cell_type":"markdown","metadata":{"id":"XZR4_VVtfWa9"},"source":["DOUBLE CLICK HERE TO WRITE YOUR COMMENTS\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":263},"executionInfo":{"elapsed":5581,"status":"ok","timestamp":1743373734654,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":-60},"id":"XqkqkmYXaavd","outputId":"7fabae6a-5e82-4263-8c26-bea5f2d0ad6c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-897e14b4-9156-4531-af49-c45eb24c8303\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-897e14b4-9156-4531-af49-c45eb24c8303\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving AirQualityDataHourly.csv to AirQualityDataHourly (2).csv\n"]},{"output_type":"execute_result","data":{"text/plain":["         Date      Time Nitrogen dioxide   Status\n","0  2024-01-01  01:00:00         15.90871  V ugm-3\n","1  2024-01-01  02:00:00         11.39067  V ugm-3\n","2  2024-01-01  03:00:00          6.19422  V ugm-3\n","3  2024-01-01  04:00:00          6.11006  V ugm-3\n","4  2024-01-01  05:00:00          7.01216  V ugm-3"],"text/html":["\n","  <div id=\"df-2560ad8c-759c-4723-8f13-952d8fd35750\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Nitrogen dioxide</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2024-01-01</td>\n","      <td>01:00:00</td>\n","      <td>15.90871</td>\n","      <td>V ugm-3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2024-01-01</td>\n","      <td>02:00:00</td>\n","      <td>11.39067</td>\n","      <td>V ugm-3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-01-01</td>\n","      <td>03:00:00</td>\n","      <td>6.19422</td>\n","      <td>V ugm-3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-01-01</td>\n","      <td>04:00:00</td>\n","      <td>6.11006</td>\n","      <td>V ugm-3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-01-01</td>\n","      <td>05:00:00</td>\n","      <td>7.01216</td>\n","      <td>V ugm-3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2560ad8c-759c-4723-8f13-952d8fd35750')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2560ad8c-759c-4723-8f13-952d8fd35750 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2560ad8c-759c-4723-8f13-952d8fd35750');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e754e71-e6f7-4e65-a011-8e5ec95c84b7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e754e71-e6f7-4e65-a011-8e5ec95c84b7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e754e71-e6f7-4e65-a011-8e5ec95c84b7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"air_quality_data","summary":"{\n  \"name\": \"air_quality_data\",\n  \"rows\": 8785,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 367,\n        \"samples\": [\n          \"2024-07-12\",\n          \"2024-02-03\",\n          \"2024-01-16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"09:00:00\",\n          \"17:00:00\",\n          \"01:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nitrogen dioxide\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8617,\n        \"samples\": [\n          \"7.01375\",\n          \"3.94968\",\n          \"3.4261\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"P ugm-3\",\n          \"V ugm-3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"source":["#import packages, load csv file with NO2 data droping the first 10 rows and view the first 5 rows of loaded dataset\n","import pandas as pd\n","from google.colab import drive\n","from google.colab import files\n","import io\n","\n","#drive.mount('/content/drive')\n","\n","file_path = '/content/drive/MyDrive/Colab_Data/AirQualityDataHourly.csv'\n","uploaded = files.upload()\n","\n","air_quality_data = pd.read_csv('/content/drive/MyDrive/Colab_data/AirQualityDataHourly.csv', skiprows = 10)\n","\n","air_quality_data.head()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"uqX6FgJPabBw"},"source":["## Clean and Transform\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"X7ooXX-O9zvm"},"source":["**Researching the dataset**\n","\n","I explored the dataset in Excel.\n","\n","There are 4 columns in the csv file:\n","\n","Date - containing date in the format DD/MM/YYYY; it needs to be in the datetime format so the day of the week can be extracted form the date\n","\n","Time - containing time in the format 00:00:00; doesn't require cleaning\n","\n","Nitrogen Dioxide - containing numeric values expressing NO2 air concentration; some of data is missing with 'no data' text instead as the number\n","\n","Status - containing info about the status of the data (V for verified and P for provisionally verified). It also contains units of NO2 concentration in the air (ugm-3), which are not required."]},{"cell_type":"markdown","metadata":{"id":"KdDhnnveDhAE"},"source":["**Data cleaning**\n","\n","First I will have a look at the dataset.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1743373744536,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":-60},"id":"a4yluXmqaeuJ","outputId":"b758b7cb-28ce-472d-ec48-4be68bc5c8cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Date', 'Time', 'Nitrogen dioxide', 'Status'], dtype='object')\n","Date                object\n","Time                object\n","Nitrogen dioxide    object\n","Status              object\n","dtype: object\n"]}],"source":["\n","# checking the data\n","# column names\n","print(air_quality_data.columns)\n","#data type\n","print(air_quality_data.dtypes)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"CNF8u7a8Tegb"},"source":[]},{"cell_type":"markdown","metadata":{"id":"1FepyCYPTm2z"},"source":["In the column 'Nitrogen dioxide' there are some missing data. In that case there is a text stating 'No data', which Python recognizes as string not NaN. It has to be first converted to actual NaNs and then removed/replaced."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":46,"status":"ok","timestamp":1743373756569,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":-60},"id":"8qoSHGxjeuQG","outputId":"c844bf1d-391c-43c4-b603-af4bb603dd3d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Date                 0\n","Time                 1\n","Nitrogen dioxide    48\n","Status               1\n","dtype: int64\n"]}],"source":["import numpy as np\n","# Replace 'No data' with nan\n","air_quality_data[air_quality_data == \"No data\"] = np.nan\n","\n","# checking how many missing values there are in each column\n","print(air_quality_data.isna().sum())"]},{"cell_type":"markdown","source":["Checking what is the percentage of the missing data in the dataset"],"metadata":{"id":"XUw925O15-tj"}},{"cell_type":"code","source":["Nitrogen_dioxide_null_pct = air_quality_data.isnull().mean() * 100\n","print(Nitrogen_dioxide_null_pct)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dj78Y0Ku59bf","executionInfo":{"status":"ok","timestamp":1743373759850,"user_tz":-60,"elapsed":16,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"}},"outputId":"d70d909f-c4f0-409b-c9df-a1efe2e304a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Date                0.000000\n","Time                0.011383\n","Nitrogen dioxide    0.546386\n","Status              0.011383\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["The missing data comprises only 0.01-0.54% of data in various columns thus it will be removed from the dataset."],"metadata":{"id":"3b7rP5jN4UYu"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1743370173495,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":-60},"id":"uPWTGrbxVIsX","outputId":"4e01edff-d0a7-4cb1-9e47-672bc279e6a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Date                0\n","Time                0\n","Nitrogen dioxide    0\n","Status              0\n","dtype: int64\n"]}],"source":["# Removing rows with Nan\n","no_null_air_quality = air_quality_data.dropna()\n","# checking if there are still missing values present\n","print(no_null_air_quality.isna().sum())\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"f_Wwiqf6hXSI"},"source":["The next step will be changing the date format in the 'Date' column and then extracting the day of the week from it, which will be added to the new column 'Day of the week'."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2331,"status":"ok","timestamp":1740566907244,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":0},"id":"-bzK2byxh8Oy","outputId":"f1147233-747b-443d-fdfe-18a7e0caf7ae"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-6-b282662b275c>:3: UserWarning: Parsing dates in %d/%m/%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n","  no_null_air_quality.Date = no_null_air_quality.Date.apply(pd.to_datetime)\n"]},{"output_type":"stream","name":"stdout","text":["        Date      Time Nitrogen dioxide   Status Day_of_week\n","0 2024-01-01  01:00:00         15.90871  V ugm-3      Monday\n","1 2024-01-01  02:00:00         11.39067  V ugm-3      Monday\n","2 2024-01-01  03:00:00          6.19422  V ugm-3      Monday\n","3 2024-01-01  04:00:00          6.11006  V ugm-3      Monday\n","4 2024-01-01  05:00:00          7.01216  V ugm-3      Monday\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-6-b282662b275c>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality.Date = no_null_air_quality.Date.apply(pd.to_datetime)\n","<ipython-input-6-b282662b275c>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality['Date'] = pd.to_datetime(no_null_air_quality['Date'])\n","<ipython-input-6-b282662b275c>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality['Day_of_week'] = no_null_air_quality['Date'].dt.day_name()\n"]}],"source":["from datetime import datetime\n","# changing format in the 'Date' column\n","no_null_air_quality.Date = no_null_air_quality.Date.apply(pd.to_datetime)\n","\n","# extracting day of the week from the date and generating a new column\n","no_null_air_quality['Date'] = pd.to_datetime(no_null_air_quality['Date'])\n","no_null_air_quality['Day_of_week'] = no_null_air_quality['Date'].dt.day_name()\n","print(no_null_air_quality.head())\n","\n"]},{"cell_type":"markdown","metadata":{"id":"a8wbqaBDKOUm"},"source":["To be able to look into seasonal changes in the NO2 pollution in Dundee I will associate dates to the seasons and put this information into newly generated column 'Season'.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1740566907262,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":0},"id":"2IC5pzOnK4Nw","outputId":"d30496d0-a235-414a-ee7a-688450c48b47"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-e75ef8eee81e>:19: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality['Season'] = season_list\n"]}],"source":["# Defining seasons\n","season_month = {\n","            12:'Winter', 1:'Winter', 2:'Winter',\n","            3:'Spring', 4:'Spring', 5:'Spring',\n","            6:'Summer', 7:'Summer', 8:'Summer',\n","            9:'Autumn', 10:'Autumn', 11:'Autumn'}\n","season_list = []\n","\n","# Write a function to determine the season based on the month of the input datetime object.\n","def find_season(date_time):\n","    month = date_time.month\n","    return season_month.get(month)\n","# Using loop to get the season based on the month\n","for month in no_null_air_quality['Date']:\n","    season = find_season(month)\n","    season_list.append(season)\n","\n","# Creating new column in the dataframe\n","no_null_air_quality['Season'] = season_list\n","\n"]},{"cell_type":"markdown","metadata":{"id":"2IK47ic4XHgz"},"source":["Finally, I will remove text 'ugm-3' from each row in the column 'Status' as it's not important for the analysis."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1740566907271,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":0},"id":"shY-BZiRWqXu","outputId":"64aedd38-80b6-4691-ee3f-1f76f4dd316f"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-65f35af0e9a7>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality['Status'] = no_null_air_quality['Status'].str.replace('ugm-3', '')\n"]}],"source":["# Removing string 'ugm-3' from each row of the column 'Status' by replace method\n","no_null_air_quality['Status'] = no_null_air_quality['Status'].str.replace('ugm-3', '')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"juENdVJSY0s8"},"source":["Saving cleaned data in csv file to use in PowerBI"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"elapsed":86,"status":"ok","timestamp":1740566907365,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":0},"id":"1NUpsuOfZN4-","outputId":"9fdb087b-55ed-4aa5-d85f-3eab6cebd8b3"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_8ad329d8-10e9-49f8-a2e9-3627cf48d5eb\", \"Clean_air_quality.csv\", 446311)"]},"metadata":{}}],"source":["#saving cleaned and transformed data as csv file\n","no_null_air_quality.to_csv('Clean_air_quality.csv')\n","files.download('Clean_air_quality.csv')"]},{"cell_type":"markdown","metadata":{"id":"ucsYhp4Aae-E"},"source":["## Analyse\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xpoaIpIztFUL"},"source":["**Summary statistics**\n","\n","To get an understanding of the dataset as a whole, I will look at the summary statistics of the numeric and non-numeric columns."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":724},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1740566907385,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"},"user_tz":0},"id":"LlNQ9LrzapLA","outputId":"1fa67686-ba92-444c-bdf6-4993ca69304d"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 8737 entries, 0 to 8783\n","Data columns (total 6 columns):\n"," #   Column            Non-Null Count  Dtype         \n","---  ------            --------------  -----         \n"," 0   Date              8737 non-null   datetime64[ns]\n"," 1   Time              8737 non-null   object        \n"," 2   Nitrogen dioxide  8737 non-null   object        \n"," 3   Status            8737 non-null   object        \n"," 4   Day_of_week       8737 non-null   object        \n"," 5   Season            8737 non-null   object        \n","dtypes: datetime64[ns](1), object(5)\n","memory usage: 477.8+ KB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-8501d1a759f7>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  no_null_air_quality[\"Nitrogen dioxide\"] = pd.to_numeric(no_null_air_quality[\"Nitrogen dioxide\"])\n"]},{"output_type":"execute_result","data":{"text/plain":["                                 Date      Time  Nitrogen dioxide Status  \\\n","count                            8737      8737       8737.000000   8737   \n","unique                            NaN        24               NaN      2   \n","top                               NaN  24:00:00               NaN     V    \n","freq                              NaN       366               NaN   6532   \n","mean    2024-07-01 15:58:04.628591104       NaN          6.756268    NaN   \n","min               2024-01-01 00:00:00       NaN         -0.004010    NaN   \n","25%               2024-04-01 00:00:00       NaN          2.390300    NaN   \n","50%               2024-07-02 00:00:00       NaN          4.279790    NaN   \n","75%               2024-10-01 00:00:00       NaN          7.826030    NaN   \n","max               2024-12-31 00:00:00       NaN         63.629110    NaN   \n","std                               NaN       NaN          7.691156    NaN   \n","\n","       Day_of_week  Season  \n","count         8737    8737  \n","unique           7       4  \n","top        Tuesday  Spring  \n","freq          1270    2192  \n","mean           NaN     NaN  \n","min            NaN     NaN  \n","25%            NaN     NaN  \n","50%            NaN     NaN  \n","75%            NaN     NaN  \n","max            NaN     NaN  \n","std            NaN     NaN  "],"text/html":["\n","  <div id=\"df-63a30573-c6e3-485a-b964-ee9727757400\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Nitrogen dioxide</th>\n","      <th>Status</th>\n","      <th>Day_of_week</th>\n","      <th>Season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>8737</td>\n","      <td>8737</td>\n","      <td>8737.000000</td>\n","      <td>8737</td>\n","      <td>8737</td>\n","      <td>8737</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>NaN</td>\n","      <td>24</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>NaN</td>\n","      <td>24:00:00</td>\n","      <td>NaN</td>\n","      <td>V</td>\n","      <td>Tuesday</td>\n","      <td>Spring</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>NaN</td>\n","      <td>366</td>\n","      <td>NaN</td>\n","      <td>6532</td>\n","      <td>1270</td>\n","      <td>2192</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2024-07-01 15:58:04.628591104</td>\n","      <td>NaN</td>\n","      <td>6.756268</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2024-01-01 00:00:00</td>\n","      <td>NaN</td>\n","      <td>-0.004010</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2024-04-01 00:00:00</td>\n","      <td>NaN</td>\n","      <td>2.390300</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2024-07-02 00:00:00</td>\n","      <td>NaN</td>\n","      <td>4.279790</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2024-10-01 00:00:00</td>\n","      <td>NaN</td>\n","      <td>7.826030</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024-12-31 00:00:00</td>\n","      <td>NaN</td>\n","      <td>63.629110</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7.691156</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63a30573-c6e3-485a-b964-ee9727757400')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-63a30573-c6e3-485a-b964-ee9727757400 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-63a30573-c6e3-485a-b964-ee9727757400');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-faa24abc-af56-4ea8-86af-ec946eb9a542\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-faa24abc-af56-4ea8-86af-ec946eb9a542')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-faa24abc-af56-4ea8-86af-ec946eb9a542 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"no_null_air_quality\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000008737\",\n        \"max\": \"2024-12-31 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"8737\",\n          \"2024-07-01 15:58:04.628591104\",\n          \"2024-10-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          24,\n          \"366\",\n          \"8737\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nitrogen dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3084.390364281346,\n        \"min\": -0.00401,\n        \"max\": 8737.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.756268381595513,\n          7.82603,\n          8737.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"6532\",\n          \"8737\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day_of_week\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          \"1270\",\n          \"8737\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"2192\",\n          \"8737\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}],"source":["# display basic information about the cleaned table\n","no_null_air_quality.info()\n","\n","# I noticed that column 'Nitrogen dioxide' has data type 'object' instead of numeric\n","# I will convert column 'Nitrogen dioxide' into numeric data\n","no_null_air_quality[\"Nitrogen dioxide\"] = pd.to_numeric(no_null_air_quality[\"Nitrogen dioxide\"])\n","# display summary statistics for both numeric and non-numeric columns\n","no_null_air_quality.describe(include=\"all\")\n"]},{"cell_type":"markdown","metadata":{"id":"KM4CiW8btsIn"},"source":["**Investigating Nitrogen Dioxide level using a histogram**\n","\n","Here I will use a histogram to visualize the distribution of the NO2 level values in ug/m3."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"me7Joxf9uKBn","executionInfo":{"status":"ok","timestamp":1740566907596,"user_tz":0,"elapsed":210,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"}},"outputId":"f8af257f-aef9-4f91-bae9-c040d62dca7f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","import matplotlib.pyplot as plt\n","\n","# plotting a histogram of NO2 data\n","# creating a list of values from the 'Nitrogen Dioxide' column\n","NO2 = no_null_air_quality['Nitrogen dioxide']\n","\n","# use the list to plot the histogram\n","plt.hist(NO2, bins=30, color='red')\n","plt.xlabel('NO2 level')\n","plt.ylabel('Frequency')\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.title('Distribution of NO2 levels')\n","plt.show()"]},{"cell_type":"markdown","source":["The NO2 concentration data exhibits a right-skewed distribution, meaning that there are more low concentrations and a few very high concentrations. It is also known as the \"long-normal\" distributions and is very common of pollutant concentrations measured in the environment."],"metadata":{"id":"lsfivt3t9shv"}},{"cell_type":"markdown","source":["**Looking into relationship between NO2 level and day of the week**\n","\n","This time I will use the bar plot to show if the average NO2 levels are changing during the week."],"metadata":{"id":"TvIf3y13IMxh"}},{"source":["import matplotlib.pyplot as plt\n","\n","\n","# Group data by the day of the week and calculate the average NO2 level\n","average_no2_by_day = no_null_air_quality.groupby('Day_of_week')['Nitrogen dioxide'].mean()\n","\n","# Get unique days and their corresponding average NO2 levels\n","unique_days = average_no2_by_day.index\n","NO2_average = average_no2_by_day.values\n","\n","# Create the bar plot\n","plt.bar(unique_days, NO2_average, color='red')\n","plt.xlabel('Day of the Week')\n","plt.ylabel('Average NO2 Level')\n","plt.title('Average NO2 Level by Day of the Week')\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.show()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"OqzLKBsqKdPM","executionInfo":{"status":"ok","timestamp":1740566907766,"user_tz":0,"elapsed":167,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"}},"outputId":"9c113589-b6f7-4362-d873-1ad92d4542a7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["From this graph we can definitely see that the average concentration of NO2 is changing depending on the day of the week. The lowest concentration is observed during the weekend, which is expected as most people work Monday to Friday thus traffic is much lower on Saturday and Sunday."],"metadata":{"id":"v1EshOPj-rUS"}},{"cell_type":"markdown","source":["**Looking into relationship between NO2 level and the season**\n","\n","To see how the average level of NO2 pollution changes depending of the season of the year I will again use the bar plot."],"metadata":{"id":"cEv-it1A2PaA"}},{"cell_type":"code","source":["# Group data by the season and calculate the average NO2 level\n","average_no2_by_season = no_null_air_quality.groupby('Season')['Nitrogen dioxide'].mean()\n","\n","# Get unique seasons and their corresponding average NO2 levels\n","unique_seasons = average_no2_by_season.index\n","NO2_average = average_no2_by_season.values\n","\n","# Create the bar plot\n","plt.bar(unique_seasons, NO2_average, color='red')\n","plt.xlabel('Season')\n","plt.ylabel('Average NO2 Level')\n","plt.title('Average NO2 Level by Season')\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"nwDMCy2s22n-","executionInfo":{"status":"ok","timestamp":1740566907901,"user_tz":0,"elapsed":137,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"}},"outputId":"f6d4bc19-3c63-41d0-aa9f-9af452d52baf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Average concentration of NO2 is changing according to seasons. The highest pollutant concentartion is observed during autumn and winter. It can be explained by increased fuel burning for heating and transportation, and the natural tendency of cold, dense air to trap pollutants close to the ground."],"metadata":{"id":"Q3T2OEWH_T6x"}},{"cell_type":"code","source":[],"metadata":{"id":"ggNwSaWZU9W7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Investigating hourly NO2 level fluctuations**\n","\n","The final line plot will show average NO2 level changes over 24 hrs period.\n"],"metadata":{"id":"2mW5aybc4MD7"}},{"cell_type":"code","source":["# ploting a line graph of mean NO2 level against time of the day\n","\n","# Group data by the time and calculate the average NO2 level\n","average_no2_by_time = no_null_air_quality.groupby(no_null_air_quality['Time'].str[:2])['Nitrogen dioxide'].mean()\n","\n","# Plot line graph\n","plt.figure(figsize=(12, 5))\n","plt.plot(average_no2_by_time.index, average_no2_by_time.values, marker=\"o\", linestyle=\"-\", color='red')\n","plt.title('Hourly NO2 fluctuations')\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.xticks(range(0, 24))\n","plt.xlabel(\"Time of the day\")\n","plt.ylabel(\"Average NO2\")\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"_7B0uX1h5hAO","executionInfo":{"status":"ok","timestamp":1740574955011,"user_tz":0,"elapsed":284,"user":{"displayName":"Dominika Lewandowska","userId":"02691729454347681385"}},"outputId":"c89a5e60-bc6a-4973-93c0-fc049af478ef"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Hourly fluctuations of the NO2 concentration reflect the 'rush hours' during the day with two peaks: at 9 am and 6 pm."],"metadata":{"id":"CzgoQ0jHAqAg"}},{"cell_type":"markdown","metadata":{"id":"t-IprkKkaks9"},"source":["## Interpret and Visualise\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","source":["![air_quality_dashboard](https://drive.google.com/uc?export=view&id=175Uq3VHHn28Tf-Z63JpAd-X_StPeYLcW)\n","\n"],"metadata":{"id":"q9cI9wgiORbr"}},{"cell_type":"markdown","source":["**The first bar chart shows the average of NO2 levels depending on the season.**\n","\n","The highest level of  NO2 pollution at Dundee Mains Loan is observed during autumn/winter and the lowest during summer. It can be explained by increased fuel burning for heating and transportation during colder seasons, and the natural tendency of cold, dense air to trap pollutants close to the ground.\n","\n","**The bottom bar chart explores the relationship between average NO2 level and the day of the week.**\n","\n","The average concentration of NO2 is changing depending on the day of the week. The lowest concentration is observed during the weekend, when most people don't work and as such motor traffic is much lower than during the week.  \n","\n","**The upper line graph shows the trend in NO2 level changes over the period of 24 hours**\n","\n","By exploring this visualisation we can uncover the hourly fluctuations of the NO2 during the day. The NO2 concentration trend reflects the 'rush hours' during the day with two peaks: at 9 am and 6 pm. The dashed blue Y axis constant line represents the average NO2 concentration at this location. Times from 8 am - 1 pm and then again from 4 pm - 11 pm are periods when the NO2 concentration is higher than the yearly average. By using the 'Season' filter it's possible to check how the trend in NO2 fluctuations is changing during various time of the year.\n","\n","**The bottom line graph shows the trend in NO2 level changes over the period of 12 months**\n","\n","This chart shows NO2 level fluctuations over various months of the year. Again, the dashed blue Y axis constant line represents the average NO2 concentration. Months January - March and middle of September - three quarters of December are charcterized by the NO2 concentrations above the average. It suggest that during colder months NO2 air pollution is higher than during other parts of the year due to the increased fuel burning.\n"],"metadata":{"id":"DKuJFOqsXLrn"}},{"cell_type":"code","source":[],"metadata":{"id":"979xAJSmhrei"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e2weqIKeaoOE"},"source":["## Tell the Story\n","\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Vq3qXiDRfxWr"},"source":["The PowerBi dashboard for this project is available here: https://github.com/Dlewan15/Air-Quality/blob/main/AirQuality.pbix"]},{"cell_type":"markdown","metadata":{"id":"d_sOgyilatIK"},"source":["## Evaluate the Process\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"CZTB1yklfyXA"},"source":[]},{"cell_type":"markdown","source":["I am pleased with the cleaning and analysis parts of the project as it felt much easier than with the previous one. I was struggling a bit with finding the solution to convert 'no data' in the csv file into 'null' values in the panda dataset. If I have this type of issue again I would probably deal with 'no data' in PowerBI before the visualisation. I learnt a lot from doing this project: I got more confident with the Python cleaning and analysis and it felt more straightforward than the PowerBI stage. As for the visualisation part I had much more knowlegde (from the additional PowerBI classes with Liz) so it was much more fun to play with it."],"metadata":{"id":"ZiNqIHQmFlFm"}},{"cell_type":"markdown","metadata":{"id":"B0cmTtxu65K8"},"source":["### Helpful references\n","---\n","\n","The following resources may be useful if cleaning the data in Python:\n","\n","Skipping rows when reading datasets:  \n","https://www.geeksforgeeks.org/how-to-skip-rows-while-reading-csv-file-using-pandas/  \n","\n","Converting strings to dates:  \n","https://www.geeksforgeeks.org/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe/\n","\n","Extracting weekday from dates:\n","https://datascientyst.com/convert-datetime-day-of-week-name-number-in-pandas/\n","\n","Dropping rows where data has a given value:  \n","https://www.datasciencemadesimple.com/drop-delete-rows-conditions-python-pandas/  \n","(see section Drop a row or observation by condition)\n","\n","Convert a column of strings to a column of floats:\n","https://datatofish.com/convert-string-to-float-dataframe/  \n","\n","Create a new column from data converted in an existing column:  \n","https://www.geeksforgeeks.org/create-a-new-column-in-pandas-dataframe-based-on-the-existing-columns/  \n","\n","Rename a column:  \n","https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html  \n","\n","Remove a column by name:  \n","https://www.kite.com/python/answers/how-to-delete-columns-from-a-pandas-%60dataframe%60-by-column-name-in-python#:~:text=Use%20the%20del%20keyword%20to,the%20name%20column_name%20from%20DataFrame%20.\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1pck4GuBG-0KfB3rxeHQ86uxs8t1rJ8nU","timestamp":1743434675351},{"file_id":"1Yi_hWzcsvzbseeVF0h-9rR2TUI-qo3QB","timestamp":1739404775146}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}